stages:
  - 🧹 lint
  - 🐳 build
  - 🤞 test
  - 🚀 deploy

variables:
  DOCKER_IMAGE_NAME: pyqgis-qt-checker
  DOCKER_IMAGE_GITTAG: ${CI_COMMIT_REF_SLUG}
  DOCKER_IMAGE: ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_GITTAG}
  DOCKER_IMAGE_LATEST: ${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:latest
  PRE_COMMIT_HOME: ${CI_PROJECT_DIR}/.cache/pre-commit
  PYTHON_MINIMAL_VERSION: "3.11"

cache:
  key:
    files:
      - requirements/*.txt
  paths:
    - ${PIP_CACHE_DIR}
    - ${PRE_COMMIT_HOME}

# Common configuration for Docker jobs
.docker_config:
  image: docker:latest
  services:
    - docker:dind
  tags:
    - oslandia_linux_vm

# -- LINT JOBS ---
git-hooks:
  stage: 🧹 lint
  tags:
    - oslandia_docker
  image: python:${PYTHON_MINIMAL_VERSION}
  before_script:
    - apt install git
    - python3 -m pip install -U pip setuptools wheel
    - python3 -m venv .venv
    - source .venv/bin/activate
    - pip install pre-commit
    - pre-commit install
    - git fetch origin
  script:
    - pre-commit run --from-ref "origin/$CI_DEFAULT_BRANCH" --to-ref "$CI_COMMIT_SHA";

# docker-hadolint:
#   stage: 🧹 lint
#   image: registry.gitlab.com/pipeline-components/hadolint:latest
#   tags:
#     - oslandia_docker
#   script:
#     - hadolint --version
#     - hadolint --verbose Dockerfile
#     # - mkdir -p reports
#     # - hadolint --verbose -f gitlab_codeclimate Dockerfile > reports/hadolint-$(md5sum Dockerfile | cut -d" " -f1).json
#   # artifacts:
#   #   name: "$CI_JOB_NAME artifacts from $CI_PROJECT_NAME on $CI_COMMIT_REF_SLUG"
#   #   expire_in: 7 days
#   #   when: always
#   #   reports:
#   #     codequality:
#   #       - "reports/*"
#   #   paths:
#   #     - "reports/*"

# -- BUILD JOBS --
ctner-pyqgis-checker:
  stage: 🐳 build
  extends: .docker_config
  before_script:
    - docker --version
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker pull $DOCKER_IMAGE_LATEST || true # retrieve image if it does exist
  script:
    - echo "Building image $DOCKER_IMAGE_NAME"
    - docker build
      --cache-from $DOCKER_IMAGE_LATEST
      --tag $DOCKER_IMAGE
      --pull
      -f Dockerfile
      .
    - echo "Save image for following jobs"
    - docker save $DOCKER_IMAGE | gzip > image.tar.gz
  after_script:
    - docker logout ${CI_REGISTRY}
  artifacts:
    paths:
      - image.tar.gz
    expire_in: 7 day

# -- TEST JOBS --
test-image-pyqgis-checker:
  stage: 🤞 test
  extends: .docker_config
  needs:
    - job: ctner-pyqgis-checker
      artifacts: true
  before_script:
    - docker load < image.tar.gz
  script:
    - echo "Testing pyqt5_to_pyqt6 script from wihtin image $DOCKER_IMAGE"
    - docker run --rm $DOCKER_IMAGE pyqt5_to_pyqt6.py --help

# -- DEPLOY --
release-image:
  stage: 🚀 deploy
  extends: .docker_config
  rules:
    - if: $CI_COMMIT_BRANCH ==  $CI_DEFAULT_BRANCH || $CI_COMMIT_TAG
      when: always
    - when: never
  needs:
    - job: test-image-pyqgis-checker
    - job: ctner-pyqgis-checker
      artifacts: true
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker load < image.tar.gz
  script:
    - echo "Publishing image $DOCKER_IMAGE_NAME"

    # if triggered by git tag, use it as Docker image tag
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        TAGGED_IMAGE=${CI_REGISTRY_IMAGE}/${DOCKER_IMAGE_NAME}:${CI_COMMIT_TAG}
        docker tag $DOCKER_IMAGE $TAGGED_IMAGE
        docker push $TAGGED_IMAGE
      fi

    # tag image as latest if running on default branch
    - |
      if [ "$CI_COMMIT_BRANCH" =  $CI_DEFAULT_BRANCH ] || [ -n "$CI_COMMIT_TAG" ]; then
        docker tag $DOCKER_IMAGE $DOCKER_IMAGE_LATEST
        docker push $DOCKER_IMAGE_LATEST
      fi

  after_script:
    - docker logout ${CI_REGISTRY}
