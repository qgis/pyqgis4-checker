name: "üì¶ Build & üöÄ Release"

# Triggers
on:
  push:
    branches:
      - main
    tags:
      - "[0-9]+.[0-9]+.[0-9]+"

  pull_request:
    branches:
      - main

  workflow_dispatch:

# Globals
env:
  LINUX_DISTRIBUTION_NAME: fedora
  LINUX_DISTRIBUTION_VERSION: "39"

jobs:
  docker-qgis-qt6:
    name: "üê≥ Build QGIS with Qt6 Docker image"
    runs-on: ubuntu-latest

    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository_owner }}/qgis-qt6-unstable
      DOCKERFILE_PATH: qgis-qt6-unstable.dockerfile

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      attestations: write
      contents: read
      id-token: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Do not get extra git branches to save time

      # Uses the `docker/login-action` action to log in to the Container registry
      # using the account and password that will publish the packages.
      # Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache ccache (QGIS compilation)
        uses: actions/cache@v4
        with:
          path: /tmp/ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('*.dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      # This action will create and boot a builder that can be used in the following
      # steps of your workflow if you're using Buildx or the build-push action.
      # By default, the docker-container driver will be used to be able to build
      # multi-platform images and export cache using a BuildKit container.
      # Required to use cache-from/to in following steps
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          buildkitd-config-inline: |
            [worker.oci]
            max-parallelism = 4

      - name: Build image (PR)
        id: pr_build
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6.15.0
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          load: true
          push: false
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }}

      - name: Test image (PR)
        id: pr_test
        if: github.event_name == 'pull_request'
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }} pyqt5_to_pyqt6.py --help
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }} python3 -c "from qgis.core import Qgis; print(Qgis.QGIS_VERSION)"
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:pr-${{ github.event.pull_request.number }} python3 -c "from tokenize_rt import Offset, Token, reversed_enumerate, src_to_tokens, tokens_to_src"

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about)
      # to extract tags and labels that will be applied to the specified image.
      # The `id` "meta" allows the output of this step to be referenced in a subsequent step.
      # The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: main_meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see [Usage](https://github.com/docker/build-push-action#usage) in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: main_build_push
        uses: docker/build-push-action@v6.15.0
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          push: true
          tags: ${{ steps.main_meta.outputs.tags }}
          labels: ${{ steps.main_meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built. It increases supply chain security for people who consume the image. For more information, see [Using artifact attestations to establish provenance for builds](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds).
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.main_build_push.outputs.digest }}
          push-to-registry: true
